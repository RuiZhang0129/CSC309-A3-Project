generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  regular
  cashier
  manager
  superuser
}

enum TransactionType {
  purchase
  adjustment
  redemption
  transfer
  event
}

model User {
  id         Int       @id @default(autoincrement())
  utorid     String?   @unique
  name       String?
  username   String?
  email      String    @unique
  password   String?
  role       Role      @default(regular)
  suspicious Boolean?
  points     Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  birthday   DateTime?
  lastLogin  DateTime?
  verified   Boolean   @default(false)
  resetToken String?   @unique
  expiresAt  DateTime?
  avatarUrl  String?

  transactions        Transaction[]       @relation("UserTransactions") // ✅ 修正交易用户关系
  cashierTransactions Transaction[]       @relation("CashierTransactions") // ✅ 反向关系，匹配 `Transaction.cashier`
  organizedEvents     Event[]             @relation("OrganizerRelation")
  eventParticipations EventParticipants[]
  promotions          Promotion[]         @relation("UserPromotions") // ✅ 修复关系
  eventsOrganized     Event[]             @relation("EventOrganizers") // ✅ 反向关系

  createdTransactions Transaction[] @relation("CreatedTransactions")
}

model Promotion {
  id          Int       @id @default(autoincrement())
  name        String
  description String? // ✅ 允许为空，避免迁移失败
  type        String? // ✅ 允许为空
  startTime   DateTime? // ✅ 允许为空
  endTime     DateTime? // ✅ 允许为空
  minSpending Int?
  rate        Float?
  points      Int       @default(0)
  used        Boolean   @default(false)
  createdAt   DateTime  @default(now())

  userId       Int?
  user         User?                  @relation(fields: [userId], references: [id], name: "UserPromotions")
  transactions PromotionTransaction[] @relation(name: "PromotionTransactions")
}

model Transaction {
  id          Int                    @id @default(autoincrement())
  userId      Int
  user        User                   @relation(name: "UserTransactions", fields: [userId], references: [id])
  eventId     Int?
  event       Event?                 @relation(fields: [eventId], references: [id])
  type        TransactionType
  spent       Int?
  earned      Int?
  amount      Int?
  remark      String?
  createdAt   DateTime               @default(now())
  processed   Boolean                @default(false)
  processedBy Int?
  cashier     User?                  @relation(name: "CashierTransactions", fields: [processedBy], references: [id])
  suspicious  Boolean                @default(false)
  relatedId   Int?
  relatedType String? // ✅ 说明 relatedId 关联的实体类型
  promotions  PromotionTransaction[] @relation(name: "PromotionTransactions") // ✅ 修正 `@relation` 名称
  createdBy   String?
  creator     User?                  @relation("CreatedTransactions", fields: [createdBy], references: [utorid])
}

model PromotionTransaction {
  transactionId Int
  promotionId   Int
  transaction   Transaction @relation(name: "PromotionTransactions", fields: [transactionId], references: [id])
  promotion     Promotion   @relation(name: "PromotionTransactions", fields: [promotionId], references: [id])

  @@id([transactionId, promotionId]) // ✅ 复合主键，防止重复关联
}

model Event {
  id            Int                 @id @default(autoincrement())
  name          String
  description   String? // ✅ 新增，可选
  location      String? // ✅ 允许为空
  organizerId   Int
  organizer     User                @relation(fields: [organizerId], references: [id], name: "OrganizerRelation")
  guests        EventParticipants[]
  organizers    User[]              @relation("EventOrganizers")
  startTime     DateTime
  endTime       DateTime
  capacity      Int?
  numGuests     Int?
  pointsRemain  Int                 @default(0) // ✅ 可分配积分
  pointsAwarded Int                 @default(0) // ✅ 已分配积分
  published     Boolean             @default(false) // ✅ 仅 `manager` 可修改
  transactions  Transaction[]

  @@index([startTime])
  @@index([endTime])
}

model EventParticipants {
  userId  Int
  eventId Int
  user    User  @relation(fields: [userId], references: [id])
  event   Event @relation(fields: [eventId], references: [id])

  checkInTime  DateTime?
  pointsEarned Int?      @default(0)

  @@id([userId, eventId])
}
